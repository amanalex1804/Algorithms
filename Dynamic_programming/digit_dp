#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef  pair<int,int>P;
typedef unsigned long long int ull;

#define mm(xx) memset(xx,0,sizeof(xx))
#define pb push_back
#define scl2(xx,uu) scanf("%lld%lld",&xx,&uu)
#define SYNC ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define scd(xx) scanf("%d",&xx)
#define scd2(xx,uu) scanf("%d%d",&xx,&uu)
#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)

//  int dx[]={1,0,-1,0};int dy[]={0,1,0,-1};                           //4 directions
//  int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};      //8 directions
//  int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1};       //knight's move
//  int dx[]={-1,-1,0,1,1,1,0}; int dy[]={-1,1,2,1,-1,-2};                //hexagonally move

#define SIZ 4000001
#define INF 999999

#define T int t;for(scanf("%d",&t);t--;)
#define mod 1000000007
#define scl(xx) scanf("%lld",&xx)

string s;int l;
int dp[100][100][3];
inline int rek(int idx,int sum,int tight)
{
	if(idx>=l) return sum;
	if(dp[idx][sum][tight]!=-1 and tight==0) return dp[idx][sum][tight];
	ll res=0;
	int i,k,newtight;
	k=(tight)?(int)(s[idx]-'0'):9;
	for(i=0;i<=k;++i)
	{
		newtight=(i==(int)(s[idx]-'0'))?1:0;
		res+=rek(idx+1,sum+i,newtight);
	}
	if(!tight) dp[idx][sum][tight]=res;
	return res;	
}
int main()
{
cin>>s;
l=s.size();
memset(dp,-1,sizeof(dp));
cout<<rek(0,0,1);
 return 0;
}

