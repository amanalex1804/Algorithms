#include<bits/stdc++.h>
using namespace std;
int fn(int floor,int egg,int **dp){
    if(floor<=1 or egg==1) return floor;
    
    int &ret = dp[floor][egg];
    if(ret!=-1) return ret;
    
     // Consider all droppings from 1st floor to kth floor and 
    // return the minimum of these values plus 1. 
    int r=INT_MAX;
    for(int i=1;i<=floor;++i){
        int q = max(fn(i-1,egg-1,dp),fn(floor-i,egg,dp));
        if(q<r) r =q;
    }
    return ret =r+1;
}

int main()
 {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	int t;
	cin>>t;

	while(t--){
	    int egg,floor;cin>>egg>>floor;
	    int **dp;
	    dp = new int *[floor+1];
	    for(int i=0;i<=floor;++i) dp[i] = new int[egg+1];
	    
	    for(int i=0;i<=floor;++i)
	    for(int j=0;j<=egg;++j)
	    dp[i][j]=-1;
	    
	    cout<<fn(floor,egg,dp)<<"\n";
	
	}
	return 0;
}



////
When we drop an egg from a floor x, there can be two cases (1) The egg breaks (2) The egg doesn’t break.

1) If the egg breaks after dropping from xth floor, then we only need to check for floors lower than x with remaining eggs; so the problem reduces to x-1 floors and n-1 eggs
2) If the egg doesn’t break after dropping from the xth floor, then we only need to check for floors higher than x; so the problem reduces to k-x floors and n eggs.
