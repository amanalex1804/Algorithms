#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;
typedef  pair<int,int>P;

#define mm(xx) memset(xx,0,sizeof(xx))
#define pb push_back

#define scd(xx) scanf("%d",&xx)
#define scl(xx) scanf("%lld",&xx)
#define scl2(xx,uu) scanf("%lld%lld",&xx,&uu);
#define scd2(xx,uu) scanf("%d%d",&xx,&uu)
#define rep(xx,uu,ee) for(xx=uu;xx<ee;++xx)

//  int dx[]={1,0,-1,0};int dy[]={0,1,0,-1};                           //4 directions
//  int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};      //8 directions
//  int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1};       //knight's move

#define SIZ 4000001
#define INF 99999
#define T int t;for(scanf("%d",&t);t--;)
#define mod 1000000007
#define SYNC  ios_base::sync_with_stdio(false);  cin.tie(NULL);
int main()
{
	int n,i,j,k,val,L;
	scd(n);  //size of array
	int A[n+5];
	rep(i,0,n) scd(A[i]);   // index:  0... (prefer this )
	
	// matrix chain 
	
	int dp[n+5][n+5];  // index : 1..
	
	for(i=1;i<n;++i) dp[i][i]=0;  // single matrix is zero
	
	for(L=2;L<n;++L)       // size of gap
	{
		for(i=1;i<n-L+1;++i)   // placing the { (first bracket) 
		{
			
			j=i+L-1;                   // last index of the gap
			
			dp[i][j]=INF;        //stores minimum
			
			for(k=i;k<=j-1;++k)          // placing the braket
			{
				
				val=dp[i][k]+dp[k+1][j]+ A[i-1]*A[j]*A[k];          // matrix ( // index of A is 0.. 
				
				dp[i][j]=min(val,dp[i][j]);
			}
			
		}
		
		
	}
	
	
	
	cout<<dp[1][n-1]<<endl;  // top rightmost element ( see for n elements the result is n-1 ( use sense ) )
	return 0;
}
