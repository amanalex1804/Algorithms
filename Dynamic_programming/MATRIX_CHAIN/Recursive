#include<bits/stdc++.h>
using namespace std;
int matrixChain(int i,int j,int A[],int **dp){
    if(i==j) return 0;   // one matrix -- Multiplication Not Possible
    int &ret = dp[i][j];
    if(ret!=-1) return ret;
    
    // place parenthesis at different places  
    // between first and last matrix, recursively  
    // calculate count of multiplications for  
    // each parenthesis placement and return the  
    // minimum count
    
    int mn = INT_MAX;
    for(int k=i;k<j;++k){
        int cnt = matrixChain(i,k,A,dp)+matrixChain(k+1,j,A,dp)+(A[i-1]*A[k]*A[j]);  // if ([1,2])([2,3][3,4]) is selected
        if(cnt<mn) mn=cnt;                                                          // then ans is 1*2*4 
    }
    return ret = mn;
}
int main()
 {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	int t;
	cin>>t;

	while(t--){
	    int n;cin>>n;
	    int A[n];
	    for(int i=0;i<n;++i) cin>>A[i];  // Array [i-1,i] forms a matrix
	    int **dp;
	    dp = new int *[n+1];
	    for(int i=0;i<=n;++i) dp[i] = new int[n+1];
	    
	    for(int i=0;i<=n;++i)
	    for(int j=0;j<=n;++j)
	    dp[i][j]=-1;
	    
	    cout<<matrixChain(1,n-1,A,dp)<<"\n"; // 1 is sent here as index
	    
	    
	
	}
	return 0;
}
