#include<bits/stdc++.h>
using namespace std;
#define siz 100005
typedef pair<int,int>P;
vector<P>V[siz];
int dis[siz],vis[siz];
multiset<P>S;
void djikshtra(int src)
{
    int i,ver,wt,v2;
    fill_n(dis,siz,999);
    dis[src]=0;                   // starting source should be 0
    S.insert({0,src});        // weight and vertex is inserted in multiset
    P p,p2;
    while(!S.empty())
    {
        p=*S.begin();
        S.erase(S.begin());
        ver=p.second;
        if(vis[ver]) continue;
        vis[ver]=1;
        for(i=0;i<V[ver].size();++i)        //checking all vertex connected to the inserted vertex in multiset
        {
            v2=V[ver][i].first;
            wt=V[ver][i].second;
            if(dis[ver]+wt<dis[v2])           // checking distances
            {
                dis[v2]=dis[ver]+wt;
                S.insert({dis[v2],v2});
            }
        }
    }
}
int main()
{
    int nodes,edges,u,v,wt,i,source;
    scanf("%d%d",&nodes,&edges);
    for(i=0;i<edges;++i)
    {
        scanf("%d%d%d",&u,&v,&wt);
        V[u].push_back({v,wt});       //assuming directed graph here
    }
    scanf("%d",&source);

    djikshtra(source);
    for(i=0;i<=nodes;++i) cout<<dis[i]<<" ";  //if nor=t accessible then 999
    return 0;
}
