#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define sz 20005
typedef pair<int,int> P;
ll vis[sz],dis[sz],low[sz],par[sz];
vector<P>g[sz];
vector<int>gr[sz];
ll n,k, tim=0;
// for bridges see video of gfg
inline void bridge(int src){
	
	// dis is basically unique id
	// low is connection of vertex with any of minimum discover time
	low[src]=dis[src]=++tim;
	vis[src]=1;
	for(int i=0;i<gr[src].size();++i){
		int ver=gr[src][i];
		
		if(!vis[ver]){
			
			par[ver]=src;
			
			bridge(ver);
			
			// node of subtree is connected with any ancestor of parent
			low[src]=min(low[src],low[ver]);
			// if the bacha has no connection other than baap
			if(low[ver]>dis[src])
			{
				cout<<src<<" "<<ver<<endl;
				
			}
			
			
		}
		// update the vlaue of baap
		else if(ver!=par[src]) low[src]=min(low[src],dis[ver]);
		
	}
	
}

int main(){
	// ios_base::sync_with_stdio(false);
	// cin.tie(NULL);
	
	int x,y;
	cin>>n>>k;
	
	for(int i=0;i<k;++i){
		cin>>x>>y;
		gr[x].push_back(y);
		gr[y].push_back(x);
		
	}
	
	// checkout he input
/*	for(int i=1;i<=n;++i){
		for(int j=1;j<=n;++j){
			cin>>x;
			gr[i].push_back({j,x});
		}
	}
	*/
	for(int i=1;i<=n;++i)
	if(!vis[i]) bridge(i);
	
	
	
	
	return 0;
}

