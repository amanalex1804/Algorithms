







int LCA(int u,int v){
	
	if(lv[u]>lv[v]) swap(u,v);
	int diff=abs(lv[u]-lv[v]);
	
	for(int i=13;i>=0;--i)
	 if((1<<i)&diff) v=par[v][i];
	 
	 if(u==v) return v;
	 
	 for(int i=13;i>=0;--i){
	 	if(par[v][i]!=par[u][i]){
	 		v=par[v][i];
	 		u=par[u][i];
		 }
	 }
	 return par[u][0];
	
}






int up_qry(int u,int v){
	
	if(u==v) return 0;
	int uchain=ind[u],vchain=ind[v];
	int ans=-1;
	while(1){
		uchain=ind[u];
		if(uchain==vchain){
			if(u==v) break;
			segqry(1,1,ptr-1,inpos[v],inpos[u]);    // according to need
			if(qt[1]>ans) ans=qt[1];
			break;
		}
		segqry(1,1,ptr-1,inpos[head[uchain]],inpos[u]); // chkpt
		if(qt[1]>ans) ans=qt[1];
	
		u=head[uchain];
		u=par[u][0];
		
	}
	return ans;
	
}


void qry(int u,int v){
	int lca=LCA(u,v);
	return max(up_qry(u,lca),up_qry(v,lca));
}
