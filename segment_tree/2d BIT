#include<bits/stdc++.h>
using namespace std;
#define sz 1030
int n;
int A[sz][sz];
struct nod{
	
	int bit[4*sz];
	int col,num;
	void rem(){
		for(int i=0;i<n+10;++i) bit[i]=0;
	}
	void updat(int pos1){
		for(;pos1<=n+5;pos1+=pos1&(-pos1)) bit[pos1]+=num;
	}
	
	int quer(int pos){
		int ans=0;
		for(;pos>0;pos-=pos&(-pos)) ans+=bit[pos];
		return ans;
	}
	
}BIT[sz];

inline void update(int pos,int pos1,int val){
	
	for(;pos<=n+5;pos+=pos&(-pos)){
		BIT[pos].num=val;
		BIT[pos].updat(pos1);
	}
		
}

int query(int row,int col){
	int ans=0;

	for(;row>0;row-=row&(-row)){
		int temp=BIT[row].quer(col);
		ans+=temp;
		
	}
	return ans;
}


int main(){
	// ios_base::sync_with_stdio(false);
	// cin.tie(NULL);
	
	int t;
	cin>>t;
	while(t--){
		cin>>n;
		string s;
		for(int i=0;i<n+5;++i) BIT[i].rem();
		for(int i=0;i<n+5;++i)
		for(int j=0;j<n+5;++j)
		A[i][j]=0;
		
		while(1){
			cin>>s;
			if(s=="END") break;
			if(s=="SET"){
				int x,y,val;
				cin>>x>>y>>val;
				update(x+1,y+1,val-A[x+1][y+1]);
				A[x+1][y+1]=val;
			}
			else{
				int x1,y1,x2,y2;
				cin>>x1>>y1>>x2>>y2;
				++x1;++y1;++x2;++y2;
				
				 cout<<query(x2,y2)-query(x1-1,y2)-query(x2,y1-1)+query(x1-1,y1-1)<<"\n";
			}
			
			
		}
		
		
	}
	
	
	
	return 0;
}
