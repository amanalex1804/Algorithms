#include<bits/stdc++.h>
using namespace std;

// for sum
int A[1000],seg[1000],lazy[1000],l,r,val;
void build(int node,int st,int en)
{
if(st==en) seg[node]=A[st];
else
{
int mid=(st+en)/2;
build(2*node+1,st,mid);
build(2*node+2,mid+1,en);
seg[node]=seg[2*node+1]+seg[2*node+2];
}
}
void updaterange(int node,int st,int en)
{
if(lazy[node]!=0)             // exhausting the lazy arry
{
       seg[node]+=(en-st+1)*lazy[node];   //here calculating the sum
       if(st!=en)                            // for children
       {
       lazy[2*node+1]+=lazy[node];
       lazy[2*node+2]+=lazy[node];
       }
       lazy[node]=0;
}
if(r<st or en<l or st>en) return ;
if(l<=st and en<=r)
{
      seg[node]+=(en-st+1)*val;
      if(st!=en)
      {
      lazy[2*node+1]+=val;
      lazy[2*node+2]+=val;     // filling the lazy array
      }
      return;                    //this is important

}
int mid=(st+en)/2;
updaterange(2*node+1,st,mid);
updaterange(2*node+2,mid+1,en);
seg[node]=seg[2*node+1]+seg[2*node+2];

}
int query(int node,int st,int en)
{
if(r<st or en<l) return 0;
if(lazy[node]!=0)
{
seg[node]+=(en-st+1)*lazy[node];
if(st!=en)
{
lazy[2*node+1]+=lazy[node];
lazy[2*node+2]+=lazy[node];
}
lazy[node]=0;
}
if(l<=st and l<=en) return seg[node];
int mid=(st+en)/2;
int q1=query(node,st,mid);
int q2=query(node,mid+1,en);
return (q1+q2);
}
int main()
{
int n,i;
cin>>n;
for(i=0;i<n;++i) cin>>A[i];
build(0,0,n-1);
cout<<"\n the segment tree is \n";
for(i=0;i<2*n;++i) cout<<seg[i]<<" ";
cout<<"\nEnter the range to update and value (index 0 ..n-1) \n";
cin>>l>>r>>val;
updaterange(0,0,n-1);
cout<<"\nEnter the range of query\n";
cin>>l>>r;
cout<<query(0,0,n-1);

return 0;}
